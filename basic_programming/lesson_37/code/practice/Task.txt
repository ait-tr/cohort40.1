Вот три задачи для демонстрации работы с коллекциями, Optional и Generics в Java:

1. **Задача на работу с коллекциями и generics:**
   - **Задание:** Создайте класс `Library`, который хранит книги разных жанров.
   Используйте Generics для создания типобезопасной библиотеки, где можно хранить
   книги различных жанров в соответствующих коллекциях.
   - **Детали реализации:** Класс `Book` имеет поля `String title` и  поле ` genre`.
   Класс `Library` должен содержать метод `addBook(Book book)`, который добавляет книгу
   в соответствующую коллекцию по жанру.
   Также необходим метод `List<Book> getBooksByGenre(String genre)`,
   который возвращает список книг заданного жанра.

2. **Задача на использование Optional:**
   - **Задание:** Реализуйте метод в классе `Library` из предыдущей задачи,
   который ищет книгу по названию и возвращает объект `Optional<Book>`.
   Если книга найдена, возвращается `Optional` с книгой, в противном случае — пустой `Optional`.
   - **Детали реализации:** Метод `Optional<Book> findBookByTitle(String title)`
   должен перебирать все книги в библиотеке и возвращать `Optional.of(book)`,
   если книга с таким названием есть, или `Optional.empty()`, если такой книги нет.

3. **Задача на сочетание коллекций и Optional:**
   - **Задание:** Разработайте класс `UserRepository`, который хранит объекты `User` в коллекции.
   Каждый `User` имеет уникальный идентификатор и имя.
   Напишите метод, который возвращает `Optional<User>` по идентификатору пользователя.

   - **Детали реализации:**
   Класс `User` содержит как минимум два поля: `String id` и `String name`.
   Класс `UserRepository` содержит коллекцию пользователей и метод `Optional<User> findById(String id)`,
   который возвращает пользователя с заданным идентификатором, используя `Optional`
   для обработки ситуации, когда пользователь не найден.
